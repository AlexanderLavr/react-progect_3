{"ast":null,"code":"import { put, takeEvery } from \"redux-saga/effects\";\nexport function* doRegistration() {\n  // try {\n  //     //1st step\n  //     //2nd step\n  //     yield put({type: 'ADD_OBJ', obj: {email: \"mjkoj\"}});\n  // } catch(error) {\n  //     yield put({type: 'FETCH_FAILED', error});\n  // }\n  yield takeEvery(\"@@login/DO_LOGIN\", function* (action) {\n    try {\n      // if (needDelay) {\n      //   yield call(delay, 500);\n      // }\n      //const docs = yield call(Api.fetchData, url);\n      const _action$data = action.data,\n            email = _action$data.email,\n            password = _action$data.password;\n      console.log(email + password);\n      yield put({\n        type: \"@@login/LOGIN_SUCCESS\",\n        payload: {\n          data: \"token\"\n        }\n      });\n    } catch (error) {\n      yield put({\n        type: \"@@login/LOGIN_FAILED\",\n        payload: {\n          error: error.message\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Anuitex-105\\Desktop\\New_progect\\src\\redux\\regestration\\sagasRegestration.ts"],"names":["put","takeEvery","doRegistration","action","data","email","password","console","log","type","payload","error","message"],"mappings":"AAAA,SAAeA,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AAIA,OAAO,UAAUC,cAAV,GAAiD;AAEhD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,QAAMD,SAAS,qBAAqB,WAAUE,MAAV,EAAuB;AACvD,QAAI;AACF;AACA;AACA;AAEA;AALE,2BAQEA,MARF,CAOAC,IAPA;AAAA,YAOQC,KAPR,gBAOQA,KAPR;AAAA,YAOeC,QAPf,gBAOeA,QAPf;AAUFC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,GAAGC,QAApB;AAEA,YAAMN,GAAG,CAAC;AACRS,QAAAA,IAAI,yBADI;AAERC,QAAAA,OAAO,EAAE;AACPN,UAAAA,IAAI,EAAE;AADC;AAFD,OAAD,CAAT;AAMD,KAlBD,CAkBE,OAAOO,KAAP,EAAc;AACd,YAAMX,GAAG,CAAC;AACRS,QAAAA,IAAI,wBADI;AAERC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAEA,KAAK,CAACC;AADN;AAFD,OAAD,CAAT;AAMD;AACF,GA3BY,CAAf;AA4BP","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport registerUser from '../../components/regestration'\r\n\r\n\r\nexport function* doRegistration(): IterableIterator<any>{\r\n    \r\n        // try {\r\n        //     //1st step\r\n          \r\n        //     //2nd step\r\n        //     yield put({type: 'ADD_OBJ', obj: {email: \"mjkoj\"}});\r\n        // } catch(error) {\r\n        //     yield put({type: 'FETCH_FAILED', error});\r\n        // }\r\n        yield takeEvery(`@@login/DO_LOGIN`, function*(action: any) {\r\n            try {\r\n              // if (needDelay) {\r\n              //   yield call(delay, 500);\r\n              // }\r\n        \r\n              //const docs = yield call(Api.fetchData, url);\r\n              const {\r\n                data: { email, password }\r\n              } = action;\r\n        \r\n              console.log(email + password);\r\n        \r\n              yield put({\r\n                type: `@@login/LOGIN_SUCCESS`,\r\n                payload: {\r\n                  data: \"token\"\r\n                }\r\n              });\r\n            } catch (error) {\r\n              yield put({\r\n                type: `@@login/LOGIN_FAILED`,\r\n                payload: {\r\n                  error: error.message\r\n                }\r\n              });\r\n            }\r\n          });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}