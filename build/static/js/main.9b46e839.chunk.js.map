{"version":3,"sources":["components/login.tsx","components/main.tsx","components/regectration.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","className","to","Main","RegistrationComponent","state","firstname","secondname","email","password","errorFirstname","errorSecondname","errorEmail","errorPassword","submitRegistration","e","preventDefault","inpRegExpr","RegExp","passWordExpr","emailRegExpr","stateValid","test","setState","console","log","fetch","method","body","JSON","stringify","headers","deleteErrorFN","deleteErrorSN","deleteErrorEM","deleteErrorPS","handle","event","target","name","value","onFocus","this","type","onChange","onClick","id","React","Component","App","exact","path","component","Regestration","Boolean","window","location","hostname","match","mainRoute","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaeA,EAVS,WACpB,OACI,yBAAKC,UAAU,SAAf,sBAEI,6BACI,kBAAC,IAAD,CAAMC,GAAG,MAAT,8DCMDC,EAXQ,WACnB,OACI,yBAAKF,UAAU,QAAf,qBAEI,6BACI,kBAAC,IAAD,CAAMC,GAAG,MAAT,8D,gDCFKE,E,2MACjBC,MAAY,CACRC,UAAW,GACXC,WAAY,GACZC,MAAO,GACPC,SAAU,GACVC,eAAgB,GAChBC,gBAAiB,GACjBC,WAAY,GACZC,cAAe,I,EAGnBC,mBAAqB,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAa,IAAIC,OAAO,iBACxBC,EAAe,IAAID,OAAO,oBAC1BE,EAAe,IAAIF,OAAO,oCAE5BG,EAAa,EACbJ,EAAWK,KAAK,EAAKjB,MAAMC,aAEvBe,EADJ,EAAKE,SAAS,CAACb,eAAgB,kPAE/BO,EAAWK,KAAK,EAAKjB,MAAME,cAEvBc,EADJ,EAAKE,SAAS,CAACZ,gBAAiB,kPAEhCS,EAAaE,KAAK,EAAKjB,MAAMG,SAEzBa,EADJ,EAAKE,SAAS,CAACX,WAAY,iCAE3BO,EAAaG,KAAK,EAAKjB,MAAMI,YAEzBY,EADJ,EAAKE,SAAS,CAACV,cAAe,0SAElCW,QAAQC,IAAIJ,GAEI,IAAbA,GACCK,MAAO,8BAA8B,CACjCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKzB,OAC1B0B,QAAQ,CACJ,eAAgB,uB,EAchCC,cAAiB,WACb,EAAKT,SAAS,CAACb,eAAgB,M,EAEnCuB,cAAiB,WACb,EAAKV,SAAS,CAACZ,gBAAiB,M,EAEpCuB,cAAiB,WACb,EAAKX,SAAS,CAACX,WAAY,M,EAE/BuB,cAAgB,WACZ,EAAKZ,SAAS,CAACV,cAAe,M,EAGlCuB,OAAS,SAACC,GACN,EAAKd,SAAL,eAAgBc,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,S,wEAG3C,IAAD,OACJ,OACI,yBAAKvC,UAAU,yBACX,yBAAKA,UAAU,kBACX,8BACI,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,kBAAf,cACA,yBAAKA,UAAU,mBACX,2BAAOwC,QAASC,KAAKV,cAAeW,KAAK,OAAOJ,KAAK,YAAYK,SAAYF,KAAKN,OAAQI,MAAOE,KAAKrC,MAAMC,cAGpH,yBAAKL,UAAU,SAASyC,KAAKrC,MAAMK,gBACnC,yBAAKT,UAAU,mBACX,yBAAKA,UAAU,mBAAf,eACA,yBAAKA,UAAU,oBACX,2BAAOwC,QAASC,KAAKT,cAAeU,KAAK,OAAOJ,KAAK,aAAaK,SAAYF,KAAKN,OAAQI,MAAOE,KAAKrC,MAAME,eAGrH,yBAAKN,UAAU,SAASyC,KAAKrC,MAAMM,iBACnC,yBAAKV,UAAU,cACX,yBAAKA,UAAU,cAAf,UACA,yBAAKA,UAAU,eACX,2BAAOwC,QAASC,KAAKR,cAAeS,KAAK,QAAQJ,KAAK,QAAQK,SAAYF,KAAKN,OAAQI,MAAOE,KAAKrC,MAAMG,UAGjH,yBAAKP,UAAU,SAASyC,KAAKrC,MAAMO,YACnC,yBAAKX,UAAU,iBACX,yBAAKA,UAAU,iBAAf,aACA,yBAAKA,UAAU,kBACX,2BAAOwC,QAASC,KAAKP,cAAcQ,KAAK,WAAWJ,KAAK,WAAWK,SAAYF,KAAKN,OAAQI,MAAOE,KAAKrC,MAAMI,aAGtH,yBAAKR,UAAU,SAASyC,KAAKrC,MAAMQ,eACnC,yBAAKZ,UAAU,eACX,4BAAQ4C,QAAS,SAAC9B,GAAD,OAAO,EAAKD,mBAAmBC,IAAI+B,GAAG,kBAAvD,mBAIZ,6BACI,kBAAC,IAAD,CAAM5C,GAAG,KAAT,iE,GA5G+B6C,IAAMC,W,OCkB1CC,EAlBO,WACpB,OACE,6BAEE,kBAAC,IAAD,KACE,4BACE,4BAAI,kBAAC,IAAD,CAAM/C,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,kBAEN,kBAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjC,kBAAC,IAAD,CAAOgD,KAAK,SAASC,UAAWpD,IAChC,kBAAC,IAAD,CAAOmD,KAAK,gBAAgBC,UAAWC,OCN3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAYC,SAASC,eAAe,QAC1CC,IAASC,OACL,kBAAC,EAAD,MACAJ,GDgIE,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9b46e839.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Login: React.FC = () => {\r\n    return(\r\n        <div className=\"login\">\r\n            This ig login Page!\r\n            <div>\r\n                <Link to=\"./\">На главную</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login;\r\n\r\n// class Same extends React.Component{\r\n//  return\r\n// }\r\n// export default {Login, Same};","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Main: React.FC = () => {\r\n    return(\r\n        <div className=\"main\">\r\n            This ig Main Page!\r\n            <div>\r\n                <Link to=\"./\">На главную</Link>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Main;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import Error from './error';\r\n\r\n\r\n\r\nexport default class RegistrationComponent extends React.Component{\r\n    state:any = {\r\n        firstname: '',\r\n        secondname: '',\r\n        email: '',\r\n        password: '',\r\n        errorFirstname: '',\r\n        errorSecondname: '',\r\n        errorEmail: '',\r\n        errorPassword: ''\r\n    }\r\n    \r\n    submitRegistration = (e: any)=>{\r\n        e.preventDefault();\r\n        const inpRegExpr = new RegExp(/[a-zA-Z]{3,}/i);\r\n        const passWordExpr = new RegExp(/[a-zA-Z0-9]{3,}/i);\r\n        const emailRegExpr = new RegExp(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/);\r\n    \r\n        let stateValid = 0;\r\n        if(!inpRegExpr.test(this.state.firstname)){\r\n            this.setState({errorFirstname: 'Error: только буквы латинского алфавита не менее 3-х'} as any)\r\n        }else{++stateValid}\r\n        if(!inpRegExpr.test(this.state.secondname)){\r\n            this.setState({errorSecondname: 'Error: только буквы латинского алфавита не менее 3-х'} as any)\r\n        }else{++stateValid}\r\n        if(!emailRegExpr.test(this.state.email)){\r\n            this.setState({errorEmail: 'Error: uncorrectEmail value!'} as any)\r\n        }else{++stateValid}\r\n        if(!passWordExpr.test(this.state.password)){\r\n            this.setState({errorPassword: 'Error: допустимы буквы латинского алфавита и цифры не менее 3-х'} as any)\r\n        }else{++stateValid}\r\n        console.log(stateValid)\r\n\r\n        if(stateValid===4){\r\n            fetch ('http://localhost:3000/users',{\r\n                method: 'POST',\r\n                body: JSON.stringify(this.state),\r\n                headers:{\r\n                    \"Content-type\": \"application/json\"\r\n                }\r\n            })\r\n           \r\n        }\r\n        // setTimeout(()=>{\r\n        //     fetch('http://localhost:3000/users')\r\n        //     .then(response => response.json())\r\n        //     .then(result =>{\r\n        //         console.log(result)\r\n        // })\r\n        // }, 1000)\r\n      \r\n    }\r\n    deleteErrorFN  = () =>{\r\n        this.setState({errorFirstname: ''} as any)\r\n    }\r\n    deleteErrorSN  = () =>{\r\n        this.setState({errorSecondname: ''} as any)\r\n    }\r\n    deleteErrorEM  = () =>{\r\n        this.setState({errorEmail: ''} as any)\r\n    }\r\n    deleteErrorPS = () => {\r\n        this.setState({errorPassword: ''} as any)\r\n    }\r\n   \r\n    handle = (event:any)=>{\r\n        this.setState({[event.target.name]:event.target.value} as any)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"containerRegestration\">\r\n                <div className=\"conteiner-form\">\r\n                    <form>\r\n                        <div className=\"item-firstname\">\r\n                            <div className=\"firstname-left\">FirstName:</div>\r\n                            <div className=\"firstname-right\">\r\n                                <input onFocus={this.deleteErrorFN} type=\"text\" name=\"firstname\" onChange = {this.handle} value={this.state.firstname} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"error\">{this.state.errorFirstname}</div>\r\n                        <div className=\"item-secondname\">\r\n                            <div className=\"secondname-left\">SecondName:</div>\r\n                            <div className=\"secondname-right\">\r\n                                <input onFocus={this.deleteErrorSN} type=\"text\" name=\"secondname\" onChange = {this.handle} value={this.state.secondname}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"error\">{this.state.errorSecondname}</div>\r\n                        <div className=\"item-email\">\r\n                            <div className=\"email-left\">Email:</div>\r\n                            <div className=\"email-right\">\r\n                                <input onFocus={this.deleteErrorEM} type=\"email\" name=\"email\" onChange = {this.handle} value={this.state.email}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"error\">{this.state.errorEmail}</div>\r\n                        <div className=\"item-password\">\r\n                            <div className=\"password-left\">Password:</div>\r\n                            <div className=\"password-right\">\r\n                                <input onFocus={this.deleteErrorPS}type=\"password\" name=\"password\" onChange = {this.handle} value={this.state.password}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"error\">{this.state.errorPassword}</div>\r\n                        <div className=\"item-button\">\r\n                            <button onClick={(e) => this.submitRegistration(e)} id=\"submit-registr\">Registration</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <Link to=\"/\">На главную</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport Login from './components/login';\nimport Main from './components/main';\nimport Regestration from './components/regectration';\nimport { Route, Link, BrowserRouter as Router } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n    \n      <Router>\n        <ul>\n          <li><Link to=\"/\">Main</Link></li>\n          <li><Link to=\"/login\">Login</Link></li>\n          <li><Link to=\"/regestration\">Regestration</Link></li>\n        </ul>\n        <Route exact path=\"/\" component={Main} /> \n        <Route path=\"/login\" component={Login} /> \n        <Route path=\"/regestration\" component={Regestration} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst mainRoute = document.getElementById('root');\nReactDOM.render(\n    <App />,\n    mainRoute);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}